package projectEuler.pb_16_to_30;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Problems_16_to_30_Java {

	/**
	 *2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
	 * What is the sum of the digits of the number 2^1000?
	 */
	public static int problem16() {
		String[] digits = (new BigInteger("2").pow(1000)).toString().split("");
		return Arrays.asList(digits).stream().mapToInt(Integer::parseInt).sum();
	}
	
	/**
	 * If the numbers 1 to 5 are written out in words: one, two, three, four,
	 * five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
	 * 
	 * If all the numbers from 1 to 1000 (one thousand) inclusive were written
	 * out in words, how many letters would be used?
	 * 
	 * NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and
	 * forty-two) contains 23 letters and 115 (one hundred and fifteen) contains
	 * 20 letters. The use of "and" when writing out numbers is in compliance
	 * with British usage.
	 */
	public static int problem17() {
		return Problems_16_to_30_Scala.problem17();
	}
	
	/**
	 * The prime factors of 13195 are 5, 7, 13 and 29.
	 * What is the largest prime factor of the number 600851475143 ?
	 */
	public static long problem18() throws IOException {
		List<List<Integer>> field = new ArrayList<>();
		BufferedReader br = new BufferedReader(
				new FileReader(new File(Problems_16_to_30_Java.class.getResource("data/problem18.txt").getPath().replace("bin","src").replace("%20"," "))));
		String line;
		while ((line = br.readLine()) != null) 
			field.add(Arrays.asList(line.split("\\s+")).stream().map(Integer::parseInt).collect(Collectors.toList()));
		br.close();
		System.out.println(field);
		return 0; 
	}

	/**
	 * A palindromic number reads the same both ways. The largest palindrome
	 * made from the product of two 2-digit numbers is 9009 = 91 × 99.
	 * Find the largest palindrome made from the product of two 3-digit numbers.
	 */
	public static int problem4() {
		return 0;
	}

	/**
	 * 2520 is the smallest number that can be divided by each of the numbers
	 * from 1 to 10 without any remainder.
	 * What is the smallest positive number that is evenly divisible by all of
	 * the numbers from 1 to 20?
	 */
	public static int problem5() {
		return 0;
	}
	
	/**
	 * The sum of the squares of the first ten natural numbers is, 1^2 + 2^2 + ...
	 * + 10^2 = 385
	 * 
	 * The square of the sum of the first ten natural numbers is, (1 + 2 + ... +
	 * 10)^2 = 552 = 3025
	 * 
	 * Hence the difference between the sum of the squares of the first ten
	 * natural numbers and the square of the sum is 3025 − 385 = 2640.
	 * 
	 * Find the difference between the sum of the squares of the first one
	 * hundred natural numbers and the square of the sum.
	 */
	public static int problem6() {
		return 0;
	}

	/**
	 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can
	 * see that the 6th prime is 13.
	 * What is the 10 001st prime number?
	 */
	public static int problem7() {
	
		return 0;
	}
	
	/**
	 * The four adjacent digits in the 1000-digit number that have the greatest
	 * product are 9 × 9 × 8 × 9 = 5832. Find the thirteen adjacent digits in
	 * the 1000-digit number that have the greatest product. What is the value
	 * of this product?
	 */
	public static int problem8() {
		return 0;
	}
	
	/**
	 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for
	 * which, a^2 + b^2 = c^2
	 * 
	 * For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
	 * 
	 * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
	 * Find the product abc.
	 */
	public static int problem9() {
		return 0;
	}
	
	/**
	 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
	 * Find the sum of all the primes below two million.
	 */
	public static long problem10() {
		return 0;
	}
	
	/**
	 * What is the greatest product of four adjacent numbers in the same
	 * direction (up, down, left, right, or diagonally) in the 20×20 grid?
	 */
	public static int problem11() {
		return 0;
	}

	public static int problem11_bis() {
		return 0;
	}
	
	/**
	 * The sequence of triangle numbers is generated by adding the natural
	 * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
	 * 28. The first ten terms would be:
	 * 
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * 
	 * Let us list the factors of the first seven triangle numbers:
	 * 
	 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
	 * 1,2,4,7,14,28
	 * 
	 * We can see that 28 is the first triangle number to have over five
	 * divisors.
	 * 
	 * What is the value of the first triangle number to have over five hundred
	 * divisors?
	 */
	public static int problem12() {
		return 0;
	}
	
	public static int problem12_bis() {
		return 0;
	}
	
	/**
	 * Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
	 */
	public static long problem13() {
		return 0;
	}
	
	/**
	 * The following iterative sequence is defined for the set of positive
	 * integers:
	 * 
	 * n → n/2 (n is even) n → 3n + 1 (n is odd)
	 * 
	 * Using the rule above and starting with 13, we generate the following
	 * sequence: 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
	 * 
	 * It can be seen that this sequence (starting at 13 and finishing at 1)
	 * contains 10 terms. Although it has not been proved yet (Collatz Problem),
	 * it is thought that all starting numbers finish at 1.
	 * 
	 * Which starting number, under one million, produces the longest chain?
	 * 
	 * NOTE: Once the chain starts the terms are allowed to go above one
	 * million.
	 */
	public static int problem14() {
		return 0;
	}
	
	public static int problem14_bis() {
		return 0;
	}
	
	/**
	 * Starting in the top left corner of a 2×2 grid, and only being able to
	 * move to the right and down, there are exactly 6 routes to the bottom
	 * right corner.
	 */
	public static long problem15() {
		return 0;
	}
	
	public static long problem15_bis() {
		return 0;
	}

	public static void main(String[] args) throws IOException {
//		System.out.println(problem16());
//		System.out.println(problem17());
		System.out.println(problem18());
		
	}
}

//long start = System.currentTimeMillis();
//assert(problem16     () == 1366       );
//assert(problem17     () == 21124      );
//assert(problem3     () == 6857         );
//assert(problem4     () == 906609       );
//assert(problem5     () == 232792560    );
//assert(problem6     () == 25164150     );
//assert(problem7     () == 104743       );
//assert(problem8     () == 2123366400   );
//assert(problem9     () == 31875000     );
//assert(problem10    () == 142913828922L);
//assert(problem11    () == 70600674     );
//assert(problem11_bis() == 70600674     );
//assert(problem12    () == 76576500     );
//assert(problem12_bis() == 76576500     );
//assert(problem13    () == 5537376230L  );
//assert(problem14    () == 837799       );
//assert(problem14_bis() == 837799       );
//assert(problem15    () == 137846528820L);
//assert(problem15_bis() == 137846528820L);
//System.out.println(String.format("All 19 tests passed in %d ms",System.currentTimeMillis() - start));